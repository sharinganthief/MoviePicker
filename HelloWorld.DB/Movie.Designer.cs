//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MovieCollectionModel", "FK_PersonFilmIndex_FilmRoles", "FilmRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HelloWorld.DB.FilmRole), "PersonFilmIndex", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HelloWorld.DB.PersonFilmIndex), true)]
[assembly: EdmRelationshipAttribute("MovieCollectionModel", "FK_GenreFilmIndex_Films", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HelloWorld.DB.Film), "GenreFilmIndex", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HelloWorld.DB.GenreFilmIndex), true)]
[assembly: EdmRelationshipAttribute("MovieCollectionModel", "FK_PersonFilmIndex_Films", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HelloWorld.DB.Film), "PersonFilmIndex", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HelloWorld.DB.PersonFilmIndex), true)]
[assembly: EdmRelationshipAttribute("MovieCollectionModel", "FK_GenreFilmIndex_Genres", "Genre", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HelloWorld.DB.Genre), "GenreFilmIndex", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HelloWorld.DB.GenreFilmIndex), true)]
[assembly: EdmRelationshipAttribute("MovieCollectionModel", "FK_PersonFilmIndex_People", "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HelloWorld.DB.Person), "PersonFilmIndex", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HelloWorld.DB.PersonFilmIndex), true)]
[assembly: EdmRelationshipAttribute("MovieCollectionModel", "FK_Films_Ratings", "Rating", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HelloWorld.DB.Rating), "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HelloWorld.DB.Film), true)]

#endregion

namespace HelloWorld.DB
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MovieCollectionEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MovieCollectionEntities object using the connection string found in the 'MovieCollectionEntities' section of the application configuration file.
        /// </summary>
        public MovieCollectionEntities() : base("name=MovieCollectionEntities", "MovieCollectionEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MovieCollectionEntities object.
        /// </summary>
        public MovieCollectionEntities(string connectionString) : base(connectionString, "MovieCollectionEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MovieCollectionEntities object.
        /// </summary>
        public MovieCollectionEntities(EntityConnection connection) : base(connection, "MovieCollectionEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FilmRole> FilmRoles
        {
            get
            {
                if ((_FilmRoles == null))
                {
                    _FilmRoles = base.CreateObjectSet<FilmRole>("FilmRoles");
                }
                return _FilmRoles;
            }
        }
        private ObjectSet<FilmRole> _FilmRoles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Film> Films
        {
            get
            {
                if ((_Films == null))
                {
                    _Films = base.CreateObjectSet<Film>("Films");
                }
                return _Films;
            }
        }
        private ObjectSet<Film> _Films;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GenreFilmIndex> GenreFilmIndexes
        {
            get
            {
                if ((_GenreFilmIndexes == null))
                {
                    _GenreFilmIndexes = base.CreateObjectSet<GenreFilmIndex>("GenreFilmIndexes");
                }
                return _GenreFilmIndexes;
            }
        }
        private ObjectSet<GenreFilmIndex> _GenreFilmIndexes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Person> People
        {
            get
            {
                if ((_People == null))
                {
                    _People = base.CreateObjectSet<Person>("People");
                }
                return _People;
            }
        }
        private ObjectSet<Person> _People;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PersonFilmIndex> PersonFilmIndexes
        {
            get
            {
                if ((_PersonFilmIndexes == null))
                {
                    _PersonFilmIndexes = base.CreateObjectSet<PersonFilmIndex>("PersonFilmIndexes");
                }
                return _PersonFilmIndexes;
            }
        }
        private ObjectSet<PersonFilmIndex> _PersonFilmIndexes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Rating> Ratings
        {
            get
            {
                if ((_Ratings == null))
                {
                    _Ratings = base.CreateObjectSet<Rating>("Ratings");
                }
                return _Ratings;
            }
        }
        private ObjectSet<Rating> _Ratings;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FilmRoles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilmRoles(FilmRole filmRole)
        {
            base.AddObject("FilmRoles", filmRole);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Films EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilms(Film film)
        {
            base.AddObject("Films", film);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GenreFilmIndexes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenreFilmIndexes(GenreFilmIndex genreFilmIndex)
        {
            base.AddObject("GenreFilmIndexes", genreFilmIndex);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the People EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPeople(Person person)
        {
            base.AddObject("People", person);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PersonFilmIndexes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPersonFilmIndexes(PersonFilmIndex personFilmIndex)
        {
            base.AddObject("PersonFilmIndexes", personFilmIndex);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Ratings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRatings(Rating rating)
        {
            base.AddObject("Ratings", rating);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="Film")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Film : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Film object.
        /// </summary>
        /// <param name="filmID">Initial value of the FilmID property.</param>
        /// <param name="length">Initial value of the Length property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="movieRating">Initial value of the MovieRating property.</param>
        public static Film CreateFilm(global::System.Int32 filmID, global::System.Int32 length, global::System.Int32 year, global::System.String title, global::System.Int32 movieRating)
        {
            Film film = new Film();
            film.FilmID = filmID;
            film.Length = length;
            film.Year = year;
            film.Title = title;
            film.MovieRating = movieRating;
            return film;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmID
        {
            get
            {
                return _FilmID;
            }
            set
            {
                if (_FilmID != value)
                {
                    OnFilmIDChanging(value);
                    ReportPropertyChanging("FilmID");
                    _FilmID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FilmID");
                    OnFilmIDChanged();
                }
            }
        }
        private global::System.Int32 _FilmID;
        partial void OnFilmIDChanging(global::System.Int32 value);
        partial void OnFilmIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Length
        {
            get
            {
                return _Length;
            }
            set
            {
                OnLengthChanging(value);
                ReportPropertyChanging("Length");
                _Length = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Length");
                OnLengthChanged();
            }
        }
        private global::System.Int32 _Length;
        partial void OnLengthChanging(global::System.Int32 value);
        partial void OnLengthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MovieRating
        {
            get
            {
                return _MovieRating;
            }
            set
            {
                OnMovieRatingChanging(value);
                ReportPropertyChanging("MovieRating");
                _MovieRating = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MovieRating");
                OnMovieRatingChanged();
            }
        }
        private global::System.Int32 _MovieRating;
        partial void OnMovieRatingChanging(global::System.Int32 value);
        partial void OnMovieRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Plot
        {
            get
            {
                return _Plot;
            }
            set
            {
                OnPlotChanging(value);
                ReportPropertyChanging("Plot");
                _Plot = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Plot");
                OnPlotChanged();
            }
        }
        private global::System.String _Plot;
        partial void OnPlotChanging(global::System.String value);
        partial void OnPlotChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImdbURL
        {
            get
            {
                return _ImdbURL;
            }
            set
            {
                OnImdbURLChanging(value);
                ReportPropertyChanging("ImdbURL");
                _ImdbURL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImdbURL");
                OnImdbURLChanged();
            }
        }
        private global::System.String _ImdbURL;
        partial void OnImdbURLChanging(global::System.String value);
        partial void OnImdbURLChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_GenreFilmIndex_Films", "GenreFilmIndex")]
        public EntityCollection<GenreFilmIndex> GenreFilmIndexes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GenreFilmIndex>("MovieCollectionModel.FK_GenreFilmIndex_Films", "GenreFilmIndex");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GenreFilmIndex>("MovieCollectionModel.FK_GenreFilmIndex_Films", "GenreFilmIndex", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_PersonFilmIndex_Films", "PersonFilmIndex")]
        public EntityCollection<PersonFilmIndex> PersonFilmIndexes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonFilmIndex>("MovieCollectionModel.FK_PersonFilmIndex_Films", "PersonFilmIndex");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonFilmIndex>("MovieCollectionModel.FK_PersonFilmIndex_Films", "PersonFilmIndex", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_Films_Ratings", "Rating")]
        public Rating Rating
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Rating>("MovieCollectionModel.FK_Films_Ratings", "Rating").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Rating>("MovieCollectionModel.FK_Films_Ratings", "Rating").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Rating> RatingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Rating>("MovieCollectionModel.FK_Films_Ratings", "Rating");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Rating>("MovieCollectionModel.FK_Films_Ratings", "Rating", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="FilmRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FilmRole : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FilmRole object.
        /// </summary>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        public static FilmRole CreateFilmRole(global::System.Int32 roleID, global::System.String roleName)
        {
            FilmRole filmRole = new FilmRole();
            filmRole.RoleID = roleID;
            filmRole.RoleName = roleName;
            return filmRole;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                if (_RoleID != value)
                {
                    OnRoleIDChanging(value);
                    ReportPropertyChanging("RoleID");
                    _RoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_PersonFilmIndex_FilmRoles", "PersonFilmIndex")]
        public EntityCollection<PersonFilmIndex> PersonFilmIndexes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonFilmIndex>("MovieCollectionModel.FK_PersonFilmIndex_FilmRoles", "PersonFilmIndex");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonFilmIndex>("MovieCollectionModel.FK_PersonFilmIndex_FilmRoles", "PersonFilmIndex", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="genreID">Initial value of the GenreID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Genre CreateGenre(global::System.Int32 genreID, global::System.String name)
        {
            Genre genre = new Genre();
            genre.GenreID = genreID;
            genre.Name = name;
            return genre;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreID
        {
            get
            {
                return _GenreID;
            }
            set
            {
                if (_GenreID != value)
                {
                    OnGenreIDChanging(value);
                    ReportPropertyChanging("GenreID");
                    _GenreID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenreID");
                    OnGenreIDChanged();
                }
            }
        }
        private global::System.Int32 _GenreID;
        partial void OnGenreIDChanging(global::System.Int32 value);
        partial void OnGenreIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_GenreFilmIndex_Genres", "GenreFilmIndex")]
        public EntityCollection<GenreFilmIndex> GenreFilmIndexes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GenreFilmIndex>("MovieCollectionModel.FK_GenreFilmIndex_Genres", "GenreFilmIndex");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GenreFilmIndex>("MovieCollectionModel.FK_GenreFilmIndex_Genres", "GenreFilmIndex", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="GenreFilmIndex")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GenreFilmIndex : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GenreFilmIndex object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="genreID">Initial value of the GenreID property.</param>
        /// <param name="filmID">Initial value of the FilmID property.</param>
        public static GenreFilmIndex CreateGenreFilmIndex(global::System.Int32 id, global::System.Int32 genreID, global::System.Int32 filmID)
        {
            GenreFilmIndex genreFilmIndex = new GenreFilmIndex();
            genreFilmIndex.ID = id;
            genreFilmIndex.GenreID = genreID;
            genreFilmIndex.FilmID = filmID;
            return genreFilmIndex;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreID
        {
            get
            {
                return _GenreID;
            }
            set
            {
                OnGenreIDChanging(value);
                ReportPropertyChanging("GenreID");
                _GenreID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GenreID");
                OnGenreIDChanged();
            }
        }
        private global::System.Int32 _GenreID;
        partial void OnGenreIDChanging(global::System.Int32 value);
        partial void OnGenreIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmID
        {
            get
            {
                return _FilmID;
            }
            set
            {
                OnFilmIDChanging(value);
                ReportPropertyChanging("FilmID");
                _FilmID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmID");
                OnFilmIDChanged();
            }
        }
        private global::System.Int32 _FilmID;
        partial void OnFilmIDChanging(global::System.Int32 value);
        partial void OnFilmIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_GenreFilmIndex_Films", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieCollectionModel.FK_GenreFilmIndex_Films", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieCollectionModel.FK_GenreFilmIndex_Films", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieCollectionModel.FK_GenreFilmIndex_Films", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieCollectionModel.FK_GenreFilmIndex_Films", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_GenreFilmIndex_Genres", "Genre")]
        public Genre Genre
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("MovieCollectionModel.FK_GenreFilmIndex_Genres", "Genre").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("MovieCollectionModel.FK_GenreFilmIndex_Genres", "Genre").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genre> GenreReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genre>("MovieCollectionModel.FK_GenreFilmIndex_Genres", "Genre");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genre>("MovieCollectionModel.FK_GenreFilmIndex_Genres", "Genre", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="Person")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Person : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="personID">Initial value of the PersonID property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        public static Person CreatePerson(global::System.Int32 personID, global::System.String firstName, global::System.String lastName)
        {
            Person person = new Person();
            person.PersonID = personID;
            person.FirstName = firstName;
            person.LastName = lastName;
            return person;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PersonID
        {
            get
            {
                return _PersonID;
            }
            set
            {
                if (_PersonID != value)
                {
                    OnPersonIDChanging(value);
                    ReportPropertyChanging("PersonID");
                    _PersonID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonID");
                    OnPersonIDChanged();
                }
            }
        }
        private global::System.Int32 _PersonID;
        partial void OnPersonIDChanging(global::System.Int32 value);
        partial void OnPersonIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_PersonFilmIndex_People", "PersonFilmIndex")]
        public EntityCollection<PersonFilmIndex> PersonFilmIndexes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonFilmIndex>("MovieCollectionModel.FK_PersonFilmIndex_People", "PersonFilmIndex");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonFilmIndex>("MovieCollectionModel.FK_PersonFilmIndex_People", "PersonFilmIndex", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="PersonFilmIndex")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonFilmIndex : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PersonFilmIndex object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="personID">Initial value of the PersonID property.</param>
        /// <param name="filmID">Initial value of the FilmID property.</param>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        public static PersonFilmIndex CreatePersonFilmIndex(global::System.Int32 id, global::System.Int32 personID, global::System.Int32 filmID, global::System.Int32 roleID)
        {
            PersonFilmIndex personFilmIndex = new PersonFilmIndex();
            personFilmIndex.ID = id;
            personFilmIndex.PersonID = personID;
            personFilmIndex.FilmID = filmID;
            personFilmIndex.RoleID = roleID;
            return personFilmIndex;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PersonID
        {
            get
            {
                return _PersonID;
            }
            set
            {
                OnPersonIDChanging(value);
                ReportPropertyChanging("PersonID");
                _PersonID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PersonID");
                OnPersonIDChanged();
            }
        }
        private global::System.Int32 _PersonID;
        partial void OnPersonIDChanging(global::System.Int32 value);
        partial void OnPersonIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmID
        {
            get
            {
                return _FilmID;
            }
            set
            {
                OnFilmIDChanging(value);
                ReportPropertyChanging("FilmID");
                _FilmID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmID");
                OnFilmIDChanged();
            }
        }
        private global::System.Int32 _FilmID;
        partial void OnFilmIDChanging(global::System.Int32 value);
        partial void OnFilmIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Character
        {
            get
            {
                return _Character;
            }
            set
            {
                OnCharacterChanging(value);
                ReportPropertyChanging("Character");
                _Character = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Character");
                OnCharacterChanged();
            }
        }
        private global::System.String _Character;
        partial void OnCharacterChanging(global::System.String value);
        partial void OnCharacterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_PersonFilmIndex_FilmRoles", "FilmRole")]
        public FilmRole FilmRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilmRole>("MovieCollectionModel.FK_PersonFilmIndex_FilmRoles", "FilmRole").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilmRole>("MovieCollectionModel.FK_PersonFilmIndex_FilmRoles", "FilmRole").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FilmRole> FilmRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilmRole>("MovieCollectionModel.FK_PersonFilmIndex_FilmRoles", "FilmRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FilmRole>("MovieCollectionModel.FK_PersonFilmIndex_FilmRoles", "FilmRole", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_PersonFilmIndex_Films", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieCollectionModel.FK_PersonFilmIndex_Films", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieCollectionModel.FK_PersonFilmIndex_Films", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieCollectionModel.FK_PersonFilmIndex_Films", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieCollectionModel.FK_PersonFilmIndex_Films", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_PersonFilmIndex_People", "Person")]
        public Person Person
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("MovieCollectionModel.FK_PersonFilmIndex_People", "Person").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("MovieCollectionModel.FK_PersonFilmIndex_People", "Person").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> PersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("MovieCollectionModel.FK_PersonFilmIndex_People", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("MovieCollectionModel.FK_PersonFilmIndex_People", "Person", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="Rating")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Rating : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Rating object.
        /// </summary>
        /// <param name="ratingID">Initial value of the RatingID property.</param>
        /// <param name="mPAARating">Initial value of the MPAARating property.</param>
        public static Rating CreateRating(global::System.Int32 ratingID, global::System.String mPAARating)
        {
            Rating rating = new Rating();
            rating.RatingID = ratingID;
            rating.MPAARating = mPAARating;
            return rating;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RatingID
        {
            get
            {
                return _RatingID;
            }
            set
            {
                if (_RatingID != value)
                {
                    OnRatingIDChanging(value);
                    ReportPropertyChanging("RatingID");
                    _RatingID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RatingID");
                    OnRatingIDChanged();
                }
            }
        }
        private global::System.Int32 _RatingID;
        partial void OnRatingIDChanging(global::System.Int32 value);
        partial void OnRatingIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MPAARating
        {
            get
            {
                return _MPAARating;
            }
            set
            {
                OnMPAARatingChanging(value);
                ReportPropertyChanging("MPAARating");
                _MPAARating = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MPAARating");
                OnMPAARatingChanged();
            }
        }
        private global::System.String _MPAARating;
        partial void OnMPAARatingChanging(global::System.String value);
        partial void OnMPAARatingChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieCollectionModel", "FK_Films_Ratings", "Film")]
        public EntityCollection<Film> Films
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Film>("MovieCollectionModel.FK_Films_Ratings", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Film>("MovieCollectionModel.FK_Films_Ratings", "Film", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieCollectionModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="collectionEditor">Initial value of the CollectionEditor property.</param>
        public static User CreateUser(global::System.String username, global::System.String firstName, global::System.String lastName, global::System.String password, global::System.Boolean collectionEditor)
        {
            User user = new User();
            user.Username = username;
            user.FirstName = firstName;
            user.LastName = lastName;
            user.Password = password;
            user.CollectionEditor = collectionEditor;
            return user;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                if (_Username != value)
                {
                    OnUsernameChanging(value);
                    ReportPropertyChanging("Username");
                    _Username = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Username");
                    OnUsernameChanged();
                }
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                if (_FirstName != value)
                {
                    OnFirstNameChanging(value);
                    ReportPropertyChanging("FirstName");
                    _FirstName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("FirstName");
                    OnFirstNameChanged();
                }
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                if (_LastName != value)
                {
                    OnLastNameChanging(value);
                    ReportPropertyChanging("LastName");
                    _LastName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LastName");
                    OnLastNameChanged();
                }
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                if (_Password != value)
                {
                    OnPasswordChanging(value);
                    ReportPropertyChanging("Password");
                    _Password = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Password");
                    OnPasswordChanged();
                }
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean CollectionEditor
        {
            get
            {
                return _CollectionEditor;
            }
            set
            {
                if (_CollectionEditor != value)
                {
                    OnCollectionEditorChanging(value);
                    ReportPropertyChanging("CollectionEditor");
                    _CollectionEditor = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CollectionEditor");
                    OnCollectionEditorChanged();
                }
            }
        }
        private global::System.Boolean _CollectionEditor;
        partial void OnCollectionEditorChanging(global::System.Boolean value);
        partial void OnCollectionEditorChanged();

        #endregion

    
    }

    #endregion

    
}
